@file:Suppress("DEPRECATION")

import Database.Question.DatabaseQuestionHelper
import Database.Quizi.DatabaseQuiziHelper
import Database.Results.DatabaseResultsHelper
import Methods.CallbackData
import Methods.CallbackData.callbackStorage
import Methods.CallbackData.dbQuestionHelper
import Methods.CallbackData.dbResultsHelper
import Methods.CallbackData.userStates
import Methods.Generation
import Methods.TextSender
import Methods.TextSender.editMessage
import Methods.TextSender.sendMessage
import org.telegram.telegrambots.bots.TelegramLongPollingBot
import org.telegram.telegrambots.meta.api.methods.ParseMode
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow
import java.text.SimpleDateFormat
import java.util.*

object StringForBot {

    const val HELLO_MESSAGE: String = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä <b><i>¬´–ê –æ–Ω–∞ —Å–ø—Ä–æ—Å–∏—Ç‚Ä¶¬ª</i></b>, –≥–¥–µ –º—ã —Å–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç—ã " +
            "–¥–ª—è –ø–∞—Ä–æ—á–µ–∫.\n\n–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç " +
            "—É–∫—Ä–µ–ø–∏—Ç—å –≤–∞—à—É –ª—é–±–æ–≤—å –∏ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\n–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"

    const val HELLO_MESSAGE_V2: String = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä <b><i>¬´–ê –æ–Ω–∞ —Å–ø—Ä–æ—Å–∏—Ç‚Ä¶¬ª</i></b>, –≥–¥–µ –º—ã —Å–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç—ã " +
            "–¥–ª—è –ø–∞—Ä–æ—á–µ–∫.\n\n–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç " +
            "—É–∫—Ä–µ–ø–∏—Ç—å –≤–∞—à—É –ª—é–±–æ–≤—å –∏ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞."

    const val WARNING_PARSE_MY_SELF_TEST: String = "ü§î –•–º–º... –ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–π—Ç–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç!\n\n" +
            "‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —á–µ—Å—Ç–Ω–æ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ \"–ø–æ–¥–∫—Ä—É—á–µ–Ω–Ω—ã–º–∏\" üòâ\n\nüéØ" +
            " –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–µ–ª–∏—Ç—å—Å—è —Ç–µ—Å—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n" +
            "üëá –ù–æ –µ—Å–ª–∏ –≤—ã –≤—Å—ë-—Ç–∞–∫–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à —Ç–µ—Å—Ç –≥–ª–∞–∑–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"

    const val TAKE_LINK_AND_LUCK: String = "\n–ü—É—Å—Ç—å –í–∞–º —Å–æ–ø—É—Ç—Å—Ç–≤—É–µ—Ç —É–¥–∞—á–∞ \uD83C\uDF40\n–ò —É—Å–ø–µ—Ö –∂–¥—ë—Ç –≤–∞—Å –≤–ø–µ—Ä–µ–¥–∏ ‚ú®"

    const val TAKE_LINK_AND_LUCK_CONGRATULATIONS: String = "\uD83C\uDF1F–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!\n"

    const val SUPPORT_TESTS_MESSAGE: String = "–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ  –¥–ª—è –í–∞—Å üíñ\n\n"

    const val MY_TESTS_AND_LINK_MESSAGE: String = "üéØ –í–∞—à–∏ —Ç–µ—Å—Ç—ã –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"

    const val ABOUT_RMP: String = "üéÄ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b> üéÄ\n\n" +
                                  "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç:\n" +
                                  "‚ú® –í—ã–±–∏—Ä–∞–π <b>—Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</b> –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ\n" +
                                  "üíû –¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ–∑–∂–µ –ø–æ–ø—Ä–æ–±—É–µ—Ç —É–≥–∞–¥–∞—Ç—å –∏—Ö\n" +
                                  "üìå –í–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ –≤–∞—Å –æ–±–æ–∏—Ö –∏–ª–∏ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö\n\n" +
                                  "<i>–°–æ–∑–¥–∞–π —Å–∞–º—ã–π —á–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç –æ <b>–≤–∞—Å</b>!</i>"








    /**  Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ "start" —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" **/
    fun mainRK() = ReplyKeyboardMarkup().apply {
        keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç ‚úè\uFE0F"))  //  ‚úèÔ∏èÔ∏è (–∫–∞—Ä–∞–Ω–¥–∞—à)
                add(KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç \uD83D\uDCDD"))   // üìù (–∑–∞–ø–∏—Å–∏)
            },
            KeyboardRow().apply {
                add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \uD83C\uDFE0"))  // üè† (–¥–æ–º)
            },
            KeyboardRow().apply {
                add(KeyboardButton("–ú–æ–∏ —Ç–µ—Å—Ç—ã \uD83D\uDDC2"))     // üóÇ (–ø–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏)
                add(KeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã \uD83D\uDCCA"))    // üìä (–≥—Ä–∞—Ñ–∏–∫)
            },
            KeyboardRow().apply {
                add(KeyboardButton("–û—Ü–µ–Ω–∏—Ç—å \u2B50"))             // ‚≠ê (–∑–≤–µ–∑–¥–∞)
//                add(KeyboardButton("–û—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å \uD83D\uDCB8")) // üí∏ (–¥–µ–Ω—å–≥–∏)
            },
        )
        resizeKeyboard = true
        oneTimeKeyboard = true
    }

    /**  Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞" **/
    fun createTestIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π").apply { callbackData = "createYourOwnPoll"}
            ),
            listOf(
                InlineKeyboardButton("\uD83D\uDCC2 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤—ã–µ").apply { callbackData = "seeReadyMadePoll" }
            ),
            listOf(
                InlineKeyboardButton("‚å©‚å©‚å©‚å©   –ù–∞–∑–∞–¥ ‚å©‚å©‚å©‚å©").apply { callbackData = "backToMainMenu" }
            )
        )
    }

    /**  Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"  **/
    fun takeTestIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("\uD83C\uDF0D –û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π").apply { callbackData = "takePublicTest" }
            ),
            listOf(
                InlineKeyboardButton("\uD83D\uDD12 –õ–∏—á–Ω—ã–π").apply { callbackData = "takePersonalTest" }
            ),
            listOf(
                InlineKeyboardButton("‚å©‚å©   –ù–∞–∑–∞–¥ ‚å©‚å©").apply { callbackData = "backToMainMenu" }
            ),
        )
    }

    fun createPageKeyboard(
        userState: CallbackData.UserState,
        currentTests: List<CallbackData.SystemTest>,
        callBackPrefix: String,
        startingTestId: Int = 1
    ): InlineKeyboardMarkup {
        val keyboard = mutableListOf<List<InlineKeyboardButton>>()


        // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        val baseIndex = userState.pageNumberForRMP * userState.testsPerPage + 1

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ—Å—Ç–æ–≤ (–ø–æ 2-3 –≤ —Ä—è–¥)
        currentTests.chunked(3).forEach { rowTests ->
            keyboard.add(
                rowTests.map { test ->
                    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–æ–º–µ—Ä, –≤—ã—á–∏—Ç–∞—è —Å–º–µ—â–µ–Ω–∏–µ
                    val displayNumber = baseIndex + (test.testId - startingTestId -
                            (userState.pageNumberForRMP * userState.testsPerPage))

                    InlineKeyboardButton(displayNumber.toString()).apply {
                        callbackData = "$callBackPrefix${test.testId}"
                    }
                }
            )
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        keyboard.add(listOf(
            InlineKeyboardButton("‚ùÆ").apply {
                callbackData = "previousTestsNavigation_${callBackPrefix}${startingTestId}"
            },
            InlineKeyboardButton("${userState.pageNumberForRMP + 1}/${userState.totalPages}").apply {
                callbackData = "pageInfo"
            },
            InlineKeyboardButton("‚ùØ").apply {
                callbackData = "nextTestsNavigation_${callBackPrefix}${startingTestId}"
            }
        ))

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.add(
            listOf(
                InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \uD83C\uDFE0").apply { callbackData = "backToMainMenuFromPage" }
            )
        )
        if (callBackPrefix == "testId_")
        keyboard.add(
            listOf(
                InlineKeyboardButton("\uD83C\uDF80 –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? \uD83C\uDF80").apply { callbackData = "howWorkRMP" }
            )
        )

        return InlineKeyboardMarkup().apply {
            this.keyboard = keyboard
        }
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–Ω–µ–ª–∏ —Å "–ú–æ–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏" **/
    fun windowWithMyTestsIK(userState: CallbackData.UserState) = InlineKeyboardMarkup().apply {
        keyboard = userState.usersTestsMutableList.map { testId ->
            val (buttonText, callbackData) = getTestButtonInfo(userState, 0, testId, "show_test")
            listOf(
                InlineKeyboardButton(buttonText).apply {
                    this.callbackData = callbackData
                },
            )
        }.toMutableList()

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"
        keyboard.add(
            listOf(
                InlineKeyboardButton("\uD83D\uDDD1\uFE0F –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç").apply {
                    this.callbackData = "deleteMyTests"
                }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–Ω–µ–ª–∏ —Å "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" **/
    fun windowWithMyResults(
        chatId: Long,
        dbQuestionHelper: DatabaseQuestionHelper,
        dbResultsHelper: DatabaseResultsHelper
    ): InlineKeyboardMarkup {
        val userState = userStates.getOrPut(chatId) { CallbackData.UserState() }
        val keyboard = mutableListOf<List<InlineKeyboardButton>>()

        userState.usersResultsMutableList.forEach { resultId ->
            val resultInfo = dbResultsHelper.getResultInfo(resultId)

            if (resultInfo != null) {
                val (authorTestId, timestamp) = resultInfo
                val testName = dbQuestionHelper.readTestName(authorTestId)?.takeIf { it.isNotBlank() } ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

                // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                val currentAttemptNumber = getAttemptNumber(authorTestId, timestamp, dbResultsHelper)

                val buttonText = "üìù $testName | ${currentAttemptNumber}-—è –ø–æ–ø."

                keyboard.add(
                    listOf(
                        InlineKeyboardButton(buttonText).apply {
                            callbackData = "show_result:$resultId"
                        }
                    )
                )
            }
        }

        return InlineKeyboardMarkup().apply {
            this.keyboard = keyboard
        }
    }

    private fun getAttemptNumber(authorTestId: String, timestamp: Long, dbResultsHelper: DatabaseResultsHelper): Int {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        val allAttempts = dbResultsHelper.getAllAttemptsForTest(authorTestId)

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ resultId
        val uniqueAttempts = allAttempts.distinctBy { it.resultId }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        val sortedAttempts = uniqueAttempts.sortedBy { it.timestamp }

        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
        val attemptIndex = sortedAttempts.indexOfFirst { it.timestamp == timestamp }

        // –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –Ω–æ–º–µ—Ä (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        return if (attemptIndex != -1) attemptIndex + 1 else 1
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–Ω–µ–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ **/
    fun deleteMyTestsIK(userState: CallbackData.UserState) = InlineKeyboardMarkup().apply {
        keyboard = userState.usersTestsMutableList.map { testId ->
            val (buttonText, callbackData) = getTestButtonInfo(userState, 0, testId, "delete_my_test")
            listOf(
                InlineKeyboardButton(buttonText).apply {
                    this.callbackData = callbackData
                },
            )
        }.toMutableList()

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚å©‚å©   –ù–∞–∑–∞–¥ ‚å©‚å©"
        keyboard.add(
            listOf(
                InlineKeyboardButton("‚å©‚å©   –ù–∞–∑–∞–¥ ‚å©‚å©").apply {
                    this.callbackData = "backToMyTestWindow"
                }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–Ω–µ–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ **/
    fun agreeToDeleteTestIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚úÖ").apply { callbackData = "deleting_agree"},
                InlineKeyboardButton("‚ùå").apply { callbackData = "deleting_disagree"}
            ),
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–Ω–µ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞ **/
    fun windowGetRuleForTakeTestIK(authorUserState: CallbackData.UserState, chatId: Long) = InlineKeyboardMarkup().apply {
        keyboard = authorUserState.usersTestsMutableList.map { testId ->
            val (buttonText, callbackData) = getTestButtonInfo(authorUserState, chatId, testId, "for")
            listOf(
                InlineKeyboardButton(buttonText).apply {
                    this.callbackData = callbackData
                },
            )
        }.toMutableList()

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø—Ä–µ—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è" —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
        val disableStorageKey = UUID.randomUUID().toString().take(10)
        callbackStorage[disableStorageKey] = CallbackData.TestData(
            chatId = chatId, // chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω –∑–∞–ø—Ä–µ—Ç
        )

        keyboard.add(
            listOf(
                InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ ‚ùå").apply {
                    this.callbackData = "disableTakingPoll_$disableStorageKey"
                }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ c –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–æ–ø—É—Å–∫–∞/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ **/
    fun skipNamingTheTestOrGenerateIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚è≠\uFE0F –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å").apply { callbackData = "skipNamingTest" }
            ),
            listOf(
                InlineKeyboardButton("‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å").apply { callbackData = "generateTestName" }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ **/
    fun generateTestNameIK(generatedName: String = "") = InlineKeyboardMarkup().apply {

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        val storageKey = UUID.randomUUID().toString().take(5) // –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        callbackStorage[storageKey] = CallbackData.TestData(0, generatedName, "") // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É

        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å").apply {
                    this.callbackData = "useGeneratedName_${storageKey}" // –ü–æ–º–µ—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                }
            ),
            listOf(
                InlineKeyboardButton("\uD83D\uDD04 –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ").apply {
                    this.callbackData = "generateTestName"
                }
            ),
            listOf(
                InlineKeyboardButton("‚è≠\uFE0F –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å").apply {
                    this.callbackData = "skipNamingTest"
                }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ **/
    fun seeSummaryResultIK(resultId: String, url: String) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã \uD83D\uDCCA").apply { callbackData = "seeTestResult_${resultId}"}
            ),
            listOf(
                InlineKeyboardButton("\uD83D\uDCE8 –û—Ç–≤–µ—Ç–∏—Ç—å").apply { this.url = url }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ **/
    fun takeMyOwnTestIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("üéÆ –í—Å—ë —Ä–∞–≤–Ω–æ —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏ —Å–≤–æ–π —Ç–µ—Å—Ç!").apply { callbackData = "startMyOwnTest" }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —Å–ª—É—á–∞–µ —Å–∞–º–æ-–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è **/
    fun createTestOnlyIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç ‚úè\uFE0F").apply { callbackData = "createTestOnly" }
            ),
            listOf(
                InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \uD83C\uDFE0").apply { callbackData = "backToMainMenu" }
            ),
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–Ω–µ–ª–∏ –æ—Ü–µ–Ω–∫–∏ **/
    fun rateBotIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                *Array(5) { index ->
                    InlineKeyboardButton("‚ô°").apply {
                        callbackData = "${CallbackData.RATE_PREFIX}${index + 1}"
                    }
                }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –æ—Ü–µ–Ω–∫–∏ **/
    fun filledRatingIK(rating: Int) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                *Array(5) { index ->
                    InlineKeyboardButton(if (index < rating) "üíñ" else "‚ô°").apply {
                        callbackData = "${CallbackData.RATE_PREFIX}${index + 1}"
                    }
                }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–ª–∞—Ç–æ–π **/
    fun donateSomeSumIK()  = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton().apply {
                    text = "üéÅ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
                    callbackData = "donateSomeSum"
                }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –¥–æ–Ω–∞—Ç–∞ **/
    fun chooseSumIK() = InlineKeyboardMarkup(). apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("60 RUB").apply { callbackData = "donateSum_60" },
                InlineKeyboardButton("90 RUB").apply { callbackData = "donateSum_90" },
            ),
            listOf(
                InlineKeyboardButton("100 RUB").apply { callbackData = "donateSum_100" },
                InlineKeyboardButton("150 RUB").apply { callbackData = "donateSum_150" },
            ),
            listOf(
                InlineKeyboardButton("200 RUB").apply { callbackData = "donateSum_300" },
                InlineKeyboardButton("300 RUB").apply { callbackData = "donateSum_300" },
            ),
            listOf(
                InlineKeyboardButton("–î—Ä—É–≥–∞—è —Å—É–º–º–∞ ‚úç\uFE0F").apply { callbackData = "donate–°ustomSum" },
            ),
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–ø–æ–¥–∞—Ä–∫–∞"**/
    fun addPepperIK(testId: String) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ").apply { callbackData =  "upload_photo_$testId"},
                InlineKeyboardButton("\uD83D\uDCCA –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥").apply { callbackData =  "set_threshold_$testId"},
            ),
            listOf(
                InlineKeyboardButton("üë§ –£–∫–∞–∑–∞—Ç—å username").apply { callbackData =  "set_username_$testId"},
                InlineKeyboardButton("‚ùì –ö–æ–ª–∏—á-–≤–æ –ø–æ–ø—ã—Ç–æ–∫").apply { callbackData =  "set_num_attempt_$testId"},
            ),
            listOf(
                InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ").apply { callbackData =  "pepper_done_$testId"},
            ),
            listOf(
                InlineKeyboardButton("‚óÄ\uFE0F –ù–∞–∑–∞–¥ –∫ –æ—Ç–≤–µ—Ç–∞–º").apply { callbackData =  "back_to_ans_$testId"},
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ**/
    fun chooseThreshold(testId: String, startHold: Int) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚ûñ").apply { callbackData =  "${testId}_hold_minus_5"},
                InlineKeyboardButton("${startHold}%").apply { callbackData =  "${testId}_hold_current_$startHold"},
                InlineKeyboardButton("‚ûï").apply { callbackData =  "${testId}_hold_plus_5"},
            ),
            listOf(
                InlineKeyboardButton("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥").apply { this.callbackData = "${testId}_hold_finish_$startHold" }
            ),
            listOf(
                InlineKeyboardButton("‚óÄ\uFE0F –ù–∞–∑–∞–¥").apply { this.callbackData = "back_to_pepper_menu_$testId" }
            ),
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ **/
    fun chooseAttempts(testId: String, startAttempts: Int) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚ûñ").apply { callbackData = "${testId}_attempts_minus_1" },
                InlineKeyboardButton("$startAttempts").apply { callbackData = "${testId}_attempts_current_$startAttempts" },
                InlineKeyboardButton("‚ûï").apply { callbackData = "${testId}_attempts_plus_1" },
            ),
            listOf(
                InlineKeyboardButton("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏").apply { this.callbackData = "${testId}_attempts_finish_$startAttempts" }
            ),
            listOf(
                InlineKeyboardButton("‚óÄ\uFE0F –ù–∞–∑–∞–¥").apply { this.callbackData = "back_to_pepper_menu_$testId" },
            ),
        )
    }

    /** –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" **/
    fun showWindowOfResults(
        bot: TelegramLongPollingBot,
        chatId: Long,
        dbQuiziHelper: DatabaseQuiziHelper,
        dbQuestionHelper: DatabaseQuestionHelper,
        dbResultsHelper: DatabaseResultsHelper
    ) {
        val userState = userStates.getOrPut(chatId) { CallbackData.UserState() }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ resultId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userState.usersResultsMutableList = dbQuiziHelper.readArrayOfResultId(chatId).filterNotNull()

        // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—É—Å—Ç
        if (userState.usersResultsMutableList.isEmpty()) {
            if (userState.keyboardAfterMainMenuMID != 0) {
                editMessage(
                    bot,
                    chatId,
                    userState.keyboardAfterMainMenuMID,
                    "–í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞\n–ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏?",
                    inlineKeyboard = takeTestIK(),
                )
            } else {
                userState.keyboardAfterMainMenuMID = sendMessage(
                    bot,
                    chatId,
                    "–í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞\n–ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏?",
                    inlineKeyboard = takeTestIK(),
                )?.messageId ?: 0
            }

            return
        }

        if (userState.myResultsMID != 0) {
            editMessage(
                bot,
                chatId,
                userState.myResultsMID,
                "üìä –¢–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –ø—Ä–æ—à–ª–∏:",
                inlineKeyboard = windowWithMyResults(chatId, dbQuestionHelper, dbResultsHelper),
                parseMode = ParseMode.HTML
            )
        } else {
            userState.myResultsMID = sendMessage(
                bot,
                chatId,
                "üìä –¢–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –ø—Ä–æ—à–ª–∏:",
                inlineKeyboard = windowWithMyResults(chatId, dbQuestionHelper, dbResultsHelper),
                parseMode = ParseMode.HTML
            )?.messageId ?: 0
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ "–ß—Ç–æ-–ª–∏–±–æ –µ—â—ë?"
        Generation.somethingElseKeyboardGeneration(bot, chatId, userState)
    }




    /** –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ "–ú–æ–∏ —Ç–µ—Å—Ç—ã" **/
    fun showWindowsWithMyTests(bot: TelegramLongPollingBot, chatId: Long, dbQuiziHelper: DatabaseQuiziHelper) {
        val userState = userStates.getOrPut(chatId) { CallbackData.UserState() }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ testId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatId
        userState.usersTestsMutableList = dbQuiziHelper.readArrayOfTestId(chatId).filterNotNull()

        if (userState.usersTestsMutableList.isEmpty()) {

            // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            TextSender.clearPreviousMessages(
                userState,
                bot,
                chatId,
                userState.mainMenuMID,
                userState.startNowMID,
                userState.somethingElseMID,
                userState.myTestsMID,
            )

            if (userState.keyboardAfterMainMenuMID != 0) {
                editMessage(
                    bot,
                    chatId,
                    userState.keyboardAfterMainMenuMID,
                    "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞\n–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
                    inlineKeyboard = createTestIK(),
                )
            } else {
                userState.keyboardAfterMainMenuMID = sendMessage(
                    bot,
                    chatId,
                    "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞\n–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
                    inlineKeyboard = createTestIK(),
                )?.messageId ?: 0
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è testId —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            Generation.randomTestIdGeneration(chatId)

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–∞—Ö
        userState.myTestsMID = sendMessage(
            bot,
            chatId,
            MY_TESTS_AND_LINK_MESSAGE,
            inlineKeyboard = windowWithMyTestsIK(userState),
        )?.messageId ?: 0

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ "–ß—Ç–æ-–ª–∏–±–æ –µ—â—ë?"
        Generation.somethingElseKeyboardGeneration(bot, chatId, userState)
        // –û–±–Ω—É–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        userState.testName = ""
    }

    /** –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —Ç–µ—Å—Ç–æ–≤ **/
    private fun getTestButtonInfo(userState: CallbackData.UserState, chatId: Long, testId: String, prefix: String): Pair<String, String> {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞ –ø–æ testId
        userState.testName = dbQuestionHelper.readTestName(testId)
        userState.completionPercent = dbQuestionHelper.readComPercent(testId)

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏ callback.data –¥–ª—è –∫–Ω–æ–ø–∫–∏
        val buttonText = if (userState.testName == "") {
            "\"–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è\" \t\t\uD83D\uDCCA  %.1f%%" .format(userState.completionPercent)
        } else {
            "\"${userState.testName}\" \t\t\uD83D\uDCCA %.1f%%" .format(userState.completionPercent)
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        val storageKey = UUID.randomUUID().toString().take(10) // –ö–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        callbackStorage[storageKey] = CallbackData.TestData(chatId, userState.testName, testId) // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É
        val callbackData = "${prefix}_$storageKey"

        return Pair(buttonText, callbackData)
    }

    /** –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ **/
    fun seeResultParametr(resultId: String, reserveUsername: String? = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"): String {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        val (authorTestId, timestamp) = dbResultsHelper.getResultInfo(resultId) ?: run {
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        val testName = dbQuestionHelper.readTestName(authorTestId) ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç"

        var (authorName, userName) = dbResultsHelper.getPersonInfo(resultId) ?: run {
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
        }
        if (authorName.isBlank() || userName.isBlank()) {
            authorName = "SomeAuthor"
            userName = reserveUsername ?: "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        val dateFormat = SimpleDateFormat("dd MMMM yyyy ‚Ä¢ HH:mm", Locale("ru")).apply {
            timeZone = TimeZone.getTimeZone("Europe/Moscow")
        }
        val formattedDateTime = dateFormat.format(Date(timestamp))

        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        val questions = dbQuestionHelper.readQuestionFromQuestionDb(authorTestId)
        if (questions.isEmpty()) {
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: —Ç–µ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        val choosedIndexes = dbResultsHelper.getChoosedIndexes(resultId)

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return buildString {
            append("\uD83C\uDF93 <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</b>\n\n")

            // –®–∞–ø–∫–∞ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            append("\uD83D\uDCDD <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> \"$testName\"\n")
            append("\uD83D\uDC64 <b>–ê–≤—Ç–æ—Ä:</b> @$authorName\n")
            append("\uD83D\uDC64 <b>–ü—Ä–æ—à—ë–ª:</b> @$userName\n")
            append("‚è±Ô∏è <b>–ó–∞–≤–µ—Ä—à–µ–Ω:</b> $formattedDateTime\n\n")
            append("${"‚îÄ".repeat(18)}\n\n")

            // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            questions.forEachIndexed { index, question ->
                append("üîπ <b>–í–æ–ø—Ä–æ—Å ‚Ññ${index + 1}</b>\n")
                append("<i>${question.questionText}</i>\n\n")

                question.listOfAnswers.forEachIndexed { answerIndex, answerText ->
                    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    val choosedIndex = choosedIndexes.getOrNull(index) ?: -1

                    val isCorrect = (answerIndex == question.indexOfRightAnswer)
                    val isUserChoice = (answerIndex == choosedIndex)

                    val emoji = when {
                        isCorrect && isUserChoice -> "üü¢‚úÖ"  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
                        isCorrect -> "‚úÖ"                   // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ –≤—ã–±—Ä–∞–Ω)
                        isUserChoice -> "üî¥‚ùå"              // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
                        else -> "‚ö™‚ñ´Ô∏è"                      // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    }

                    append("$emoji  $answerText\n")

                    when {
                        choosedIndex == -1 -> append("\n‚ö†Ô∏è <i><code>–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</code></i>\n")
                    }
                }

                append("\n${"‚îÄ".repeat(18)}\n\n")
            }

            // –§—É—Ç–µ—Ä
            append("<i>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n")
            append("ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: <code>$resultId</code></i>")
        }
    }

    /** –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤ **/
    fun createMessageForMyAnswers (testId: String) : String {
        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        val questions = dbQuestionHelper.readQuestionFromQuestionDb(testId)
        if (questions.isEmpty()) {
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: —Ç–µ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return buildString {
            append("\uD83C\uDF93 <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç</b>\n\n")
            append("${"‚îÄ".repeat(18)}\n\n")

            // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            questions.forEachIndexed { index, question ->

                append("üîπ <b>–í–æ–ø—Ä–æ—Å ‚Ññ${index + 1}</b>\n")
                append("<i>${question.questionText}</i>\n\n")

                question.listOfAnswers.forEachIndexed { answerIndex, answerText ->
                    val isCorrect = answerIndex == question.indexOfRightAnswer

                    val emoji = when {
                        isCorrect  -> "‚úÖ"  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
                        else -> "‚ñ´Ô∏è"                      // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    }

                    append("$emoji  $answerText\n")
                }

                append("\n${"‚îÄ".repeat(18)}\n\n")
            }
            // –§—É—Ç–µ—Ä
            append("<i>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n")
            append("ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: <code>$testId</code></i>")
        }
    }

    /** Inline-–∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"**/
    fun takeTestSetUrlIB(url: String) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç \uD83C\uDFAF").apply { this.url = url }
            ),
        )
    }

    /** Inline-–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ RMP"**/
    fun backToRMPIB() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚¨Ö\uFE0F –í–µ—Ä–Ω—É—Ç—å—Å—è").apply { this.callbackData = "backToRMP" }
            )
        )
    }

    /** Inline-–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ RMP"**/
    fun backToPepperMenuFromMediaIB(testId: String) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚óÄ\uFE0F –ù–∞–∑–∞–¥").apply { callbackData =  "media_back_to_pepper_menu_$testId"},
            )
        )
    }

    /** Inline-–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é Pepper"**/
    fun backToPepperMenuIB(testId: String) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚óÄ\uFE0F –ù–∞–∑–∞–¥").apply { this.callbackData = "back_to_pepper_menu_$testId" }
            )
        )
    }

    /** Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ì–ª—è–Ω—É—Ç—å –æ—Ç–≤–µ—Ç—ã"**/
    fun seeMyAnswersIK(testId: String) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("–ì–ª—è–Ω—É—Ç—å –æ—Ç–≤–µ—Ç—ã \uD83D\uDC40").apply { this.callbackData = "my_choosed_$testId" }
            ),
            listOf(
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—á–∏–Ω–∫–∏ \uD83C\uDF36").apply { callbackData = "add_some_pepper_to_$testId" }
            )
        )
    }

    /** Reply-–∫–Ω–æ–ø–∫–∞ —Å —Ñ—É–Ω–∫—Ü–∏–æ–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º "–ù–∞–∑–∞–¥" **/
    fun backRB() = ReplyKeyboardMarkup().apply {
        keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("–ù–∞–∑–∞–¥"))
            },
        )
        resizeKeyboard = true
        oneTimeKeyboard = true
        isPersistent = true
    }

    /** Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º "–ù–∞–∑–∞–¥" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" **/
    fun returnOrFinishRK() = ReplyKeyboardMarkup().apply {
        keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("–ù–∞–∑–∞–¥"))
                add(KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å"))
            },
        )
        resizeKeyboard = true
        oneTimeKeyboard = true
        isPersistent = true
    }

    /** Reply-–∫–Ω–æ–ø–∫–∞ —Å —Ñ—É–Ω–∫—Ü–∏–æ–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º "–ó–∞–≤–µ—Ä—à–∏—Ç—å" **/
    fun finishRB() = ReplyKeyboardMarkup().apply {
        keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å"))
            },
        )
        resizeKeyboard = true
        oneTimeKeyboard = true
        isPersistent = true
    }
}