package Methods

import Methods.MediaSender.sendSticker
import Methods.TextSender.clearPreviousMessages
import Methods.TextSender.deleteMessage
import Methods.TextSender.editMessage
import Methods.TextSender.sendMessage
import StringForBot
import kotlinx.coroutines.*
import org.telegram.telegrambots.bots.TelegramLongPollingBot
import org.telegram.telegrambots.meta.api.methods.ParseMode
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton

object Animation {
    fun homeStickerAnimation(bot: TelegramLongPollingBot, userState: CallbackData.UserState, chatId: Long) {
        userState.homeStickerAnimationMID = sendMessage(bot, chatId, "\uD83C\uDFE0")?.messageId ?: 0

        CoroutineScope(Dispatchers.Default).launch {
            delay(2300) // –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
            withContext(Dispatchers.IO) { //  Dispatchers.IO –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–µ—Å–ª–∏ sendMessage - —Å–µ—Ç–µ–≤–æ–π –≤—ã–∑–æ–≤)
                editMessage(
                    bot,
                    chatId,
                    userState.homeStickerAnimationMID,
                    StringForBot.HELLO_MESSAGE_V2,
                    parseMode = ParseMode.HTML
                )
                userState.startNowMID = TextSender.sendMessage(
                    bot,
                    chatId,
                    "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                    replyKeyboard = StringForBot.mainRK()
                )?.messageId ?: 0
            }
        }
    }

    fun startCreateTestWithSmile(
        bot: TelegramLongPollingBot,
        chatId: Long,
        userState: CallbackData.UserState,
        smile: String
    ) {

        CoroutineScope(Dispatchers.Default).launch {

            editMessage(bot, chatId, userState.testInstructionsMID, smile)

            delay(2300)

            try {
                editMessage(
                    bot,
                    chatId,
                    userState.testInstructionsMID,
                    "–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
                    inlineKeyboard = StringForBot.createTestIK()
                )
            } catch (e: Exception) {
                println("Error deleting in animation sequence")
            }
        }
    }

    fun openAccessWithSmile(
        bot: TelegramLongPollingBot,
        userState: CallbackData.UserState,
        testName: String,
        smile: String,
    ) {

        CoroutineScope(Dispatchers.Default).launch {

            if (userState.authorAlertForChooseMID != 0) {
                editMessage(
                    bot,
                    userState.authorChatId,
                    userState.authorAlertForChooseMID,
                    smile,
                    parseMode = ParseMode.HTML
                )
            }

            delay(2300)

            try {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–µ
                val infoAccess = """
                    üéâ <b>–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!</b>
                    üìù –¢–µ—Å—Ç "<b><i>${testName}</i></b>"
                    üë§ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è: <b>@${userState.username}</b>
                    üïí –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${userState.currentDate}
                """.trimIndent()
                if (userState.authorAlertForChooseMID != 0) {
                    editMessage(
                        bot,
                        userState.authorChatId,
                        userState.authorAlertForChooseMID,
                        infoAccess,
                        parseMode = ParseMode.HTML
                    )
                }
            } catch (e: Exception) {
                println("Error openAccessWithSmile in animation sequence")
            }

        }
    }

    fun closeAccess(
        bot: TelegramLongPollingBot,
        userState: CallbackData.UserState
    ) {
        CoroutineScope(Dispatchers.Default).launch {
            try {
                // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
                editMessage(
                    bot,
                    userState.authorChatId,
                    userState.authorAlertForChooseMID,
                    "\uD83D\uDDDD\uFE0F"
                )

                delay(2000)

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (userState.authorAlertForChooseMID != 0) {
                    deleteMessage(
                        bot,
                        userState.authorChatId,
                        userState.authorAlertForChooseMID
                    )
                }

            } catch (e: Exception) {
                println("Error closeAccessWithSimpleExplosion in animation sequence")
            }
        }
    }



    fun startTestAnimation(bot: TelegramLongPollingBot, chatId: Long, userState: CallbackData.UserState) {
        CoroutineScope(Dispatchers.Default).launch {

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è resultId
            userState.generatedResultId = Generation.randomResultIdGeneration(chatId)

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π
            val attemptInfo = userState.mapTestIdNumAttempts[userState.testId]

            if ((attemptInfo?.currentNumberOfAttempts ?: 0) > (attemptInfo?.maxNumberOfAttempts ?: Int.MAX_VALUE)) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                editMessage(
                    bot,
                    chatId,
                    userState.supportStartTestTextMID,
                    "–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ —Å–≤–æ–∏ –ø–æ–ø—ã—Ç–∫–∏...\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–≤—Ç–æ—Ä—É —Ç–µ—Å—Ç–∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ \uD83E\uDEF4 ‚ú®"
                )

                Generation.somethingElseKeyboardGeneration(bot, chatId, userState)
            } else {
                // –£–ª–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ø—ã—Ç–∫—É
                if ((attemptInfo?.currentNumberOfAttempts ?: 0) == (attemptInfo?.maxNumberOfAttempts ?: Int.MAX_VALUE)) {
                    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    withContext(Dispatchers.IO) {
                        editMessage(
                            bot,
                            chatId,
                            userState.supportStartTestTextMID,
                            "\uD83C\uDFC1 –≠—Ç–æ –≤–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!"
                        )
                    }
                    delay(1000)
                }
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                editMessage(
                    bot,
                    chatId,
                    userState.supportStartTestTextMID,
                    StringForBot.SUPPORT_TESTS_MESSAGE + "‚ûå –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å..."
                )

                delay(1000)

                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 2
                withContext(Dispatchers.IO) {
                    editMessage(
                        bot,
                        chatId,
                        userState.supportStartTestTextMID,
                        StringForBot.SUPPORT_TESTS_MESSAGE + "‚ûã –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."
                    )
                }

                delay(1000)

                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1
                withContext(Dispatchers.IO) {
                    editMessage(
                        bot,
                        chatId,
                        userState.supportStartTestTextMID,
                        StringForBot.SUPPORT_TESTS_MESSAGE + "‚ûä –ü–æ–µ—Ö–∞–ª–∏! \uD83D\uDE80"
                    )
                }

                delay(1000)

                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–∞–π–ª–∏–∫ —Ä–∞–∫–µ—Ç—ã
                withContext(Dispatchers.IO) {
                    editMessage(
                        bot,
                        chatId,
                        userState.supportStartTestTextMID,
                        "\uD83D\uDE80"
                    )
                }


                delay(1000)

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
                withContext(Dispatchers.IO) {
                    editMessage(
                        bot,
                        chatId,
                        userState.supportStartTestTextMID,
                        "–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ ‚òü"
                    )
                    PollSender.takePollWithParametr(bot, chatId)
                }

                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                userState.currentTimestamp = System.currentTimeMillis()
            }
        }
    }

    fun generateTestNameWithAnimation(
        bot: TelegramLongPollingBot,
        chatId: Long
    ) {
        val userState = CallbackData.userStates.getOrPut(chatId) { CallbackData.UserState() }
        val generatedName = TestNameGenerator.generateName() // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∑–∞—Ä–∞–Ω–µ–µ

        CoroutineScope(Dispatchers.Default + SupervisorJob()).launch {
            var currentJob: Job? = null

            try {
                currentJob = launch {
                    val animationFrames = listOf(
                        "üé≤ –ü–æ–¥–±–∏—Ä–∞–µ–º –∏–¥–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ...",
                        "‚ú® –î–æ–±–∞–≤–ª—è–µ–º —â–µ–ø–æ—Ç–∫—É –º–∞–≥–∏–∏...",
                    )

                    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    for (frame in animationFrames) {
                        try {
                            withTimeout(800) {
                                withContext(Dispatchers.IO) {
                                    editMessage(
                                        bot,
                                        chatId,
                                        userState.adviceToSkipNamingTestMID,
                                        frame
                                    )
                                }
                            }
                        } catch (e: Exception) {
                            throw CancellationException("Animation step failed")
                        }
                        delay(400)
                    }

                    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏
                    val revealMessage = "‚ú® <b>–í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>"
                    var displayedName = ""

                    // –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è –Ω–∞ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ —á–∞—Å—Ç–∏
                    val parts = generatedName.chunked(4)

                    for (part in parts) {
                        displayedName += part
                        try {
                            withTimeout(500) { // –ú–µ–Ω—å—à–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏
                                withContext(Dispatchers.IO) {
                                    editMessage(
                                        bot,
                                        chatId,
                                        userState.adviceToSkipNamingTestMID,
                                        """
                                    $revealMessage
                                    
                                    <i><b>"$displayedName‚ñå"</b></i>
                                    """.trimIndent(),
                                        parseMode = ParseMode.HTML
                                    )
                                }
                            }
                            delay(150) // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                        } catch (e: Exception) {
                            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                            throw CancellationException("Typing animation failed")
                        }
                    }

                    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    val finalMessage = """
                    ‚ú® <b>–ì–æ—Ç–æ–≤–æ!</b>
                    
                    <i><b>"$generatedName"</b></i>
                    
                    ü™Ñ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                """.trimIndent()

                    withTimeout(1000) {
                        withContext(Dispatchers.IO) {
                            editMessage(
                                bot,
                                chatId,
                                userState.adviceToSkipNamingTestMID,
                                finalMessage,
                                parseMode = ParseMode.HTML,
                                inlineKeyboard = StringForBot.generateTestNameIK(generatedName)
                            )
                        }
                    }
                }

                // –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                withTimeout(4000) {
                    currentJob.join()
                }

            } catch (e: Exception) {
                currentJob?.cancel()

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
                withContext(Dispatchers.IO) {
                    val finalMessage = """
                    ‚ú® <b>–í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>
                    
                    <i><b>"$generatedName"</b></i>
                    
                    ü™Ñ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                """.trimIndent()

                    userState.adviceToSkipNamingTestMID = sendMessage(
                        bot,
                        chatId,
                        finalMessage,
                        inlineKeyboard = StringForBot.generateTestNameIK(generatedName),
                        parseMode = ParseMode.HTML
                    )?.messageId ?: 0
                }
            }
        }
    }

    fun successfulDonate(
        bot: TelegramLongPollingBot,
        chatId: Long,
        userState: CallbackData.UserState
    ) {
        CoroutineScope(Dispatchers.Default).launch {
            try {
                delay(3000) // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ —Å –¥–µ–Ω—å–≥–∞–º–∏
                withContext(Dispatchers.IO) {
                    editMessage(
                        bot,
                        chatId,
                        userState.successfulPaymentMID,
                        "\uD83D\uDCB8"
                    )
                }
                delay(3000) // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                // –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
                withContext(Dispatchers.IO) {
                    clearPreviousMessages(userState, bot, chatId, userState.successfulPaymentMID)
                }
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ —Å —Å–∂–∏–≥–∞–Ω–∏–µ–º –¥–µ–Ω–µ–≥
                withContext(Dispatchers.IO) {
                    userState.successfulPaymentStickerMID = sendSticker(
                        bot,
                        chatId,
                        "CAACAgIAAxkBAAENckRneWCwWbtOewgx-fc1SpxeTltsNgACSQIAAladvQoqlwydCFMhDjYE"
                    )?.messageId ?: 0
                }
                delay(2500) // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞
                withContext(Dispatchers.IO) {
                    clearPreviousMessages(userState, bot, chatId, userState.successfulPaymentStickerMID)
                }

                Generation.somethingElseKeyboardGeneration(bot, chatId, userState)
            } catch (e: Exception) {
                println("Error in successfulDonate animation: ${e.message}")
            }
        }
    }


    fun startWaitingAnimation(
        bot: TelegramLongPollingBot,
        chatId: Long,
        userState: CallbackData.UserState
    ): Job {
        return CoroutineScope(Dispatchers.Default).launch {
            val waitingStates = listOf(
                "‚åõÔ∏è –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∞...",
                "‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∞...",
                "‚åõÔ∏è –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∞...",
                "‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∞..."
            )

            var currentIndex = 0
            userState.shouldSendNewMessage = true // –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

            try {
                while (isActive) {
                    withContext(Dispatchers.IO) {
                        val messageText = """
                            üîî <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>
                        
                            ${waitingStates[currentIndex]}
                        
                            üì± –°—Ç–∞—Ç—É—Å: <i>–æ–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</i>
                            üë§ –ê–≤—Ç–æ—Ä —Ç–µ—Å—Ç–∞: <b>${userState.authorUsername}</b>
                        
                            üí° <i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ
                            –∞–≤—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É</i>
                        """.trimIndent()

                        if (userState.shouldSendNewMessage) {
                            println("// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                            deleteMessage(bot, chatId, userState.testInstructionsMID)
                            userState.testInstructionsMID = sendMessage(
                                bot,
                                chatId,
                                messageText,
                                parseMode = ParseMode.HTML
                            )?.messageId ?: 0
                            userState.shouldSendNewMessage = false
                        } else {
                            if (userState.testInstructionsMID != 0) {
                                try {
                                    // –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    println("// –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                                    editMessage(
                                        bot,
                                        chatId,
                                        userState.testInstructionsMID,
                                        messageText,
                                        parseMode = ParseMode.HTML
                                    )
                                    userState.shouldSendNewMessage = false
                                } catch (e: Exception) {
                                    // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                                    userState.shouldSendNewMessage = true
                                    println("Failed to edit message: ${e.message}")
                                }

                            }

                        }
                    }
                    currentIndex = (currentIndex + 1) % waitingStates.size
                    delay(800)
                }
            } catch (e: Exception) {
                println("Animation interrupted: ${e.message}")
            }
        }
    }

    fun startRatingAnimation(bot: TelegramLongPollingBot, chatId: Long, messageId: Int, rating: Int): Job {
        return CoroutineScope(Dispatchers.Default).launch {
            // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å–µ—Ä–¥–µ—Ü –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            val heartStyles = listOf(
                "‚ô•", "üíó", "üíì", "üíñ", "üíù", "üíò", "üíï"
            )

            // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            val animationFrames = listOf(
                "‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏ ‚ú®",
                "‚≠ê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ ‚≠ê",
                "üåü –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç üåü",
                "üí´ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ üí´"
            )

            try {
                // –ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞ - –≤—Ä–∞—â–∞—é—â–∏–µ—Å—è —Å–µ—Ä–¥—Ü–∞
                repeat(2) {
                    for (heart in heartStyles) {
                        val animatedKeyboard = InlineKeyboardMarkup().apply {
                            keyboard = listOf(
                                listOf(
                                    *Array(5) { index ->
                                        InlineKeyboardButton(
                                            if (index < rating) heart else "‚ô°"
                                        ).apply {
                                            callbackData = "stars_${index + 1}"
                                        }
                                    }
                                )
                            )
                        }

                        withContext(Dispatchers.IO) {
                            editMessage(
                                bot,
                                chatId,
                                messageId,
                                """
                                    ${animationFrames[it % animationFrames.size]}

                                    ${heart.repeat(rating)}

                                    üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${(it * 25 + 25)}%
                                """.trimIndent(),
                                parseMode = ParseMode.HTML,
                                inlineKeyboard = animatedKeyboard
                            )
                        }
                        delay(150)
                    }
                }

                // –í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞ - –≤–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
                repeat(2) {
                    for (position in 0..4) {
                        val waveKeyboard = InlineKeyboardMarkup().apply {
                            keyboard = listOf(
                                listOf(
                                    *Array(5) { index ->
                                        InlineKeyboardButton(
                                            when {
                                                index == position -> "üíù"
                                                index < rating -> "üíñ"
                                                else -> "‚ô°"
                                            }
                                        ).apply {
                                            callbackData = "stars_${index + 1}"
                                        }
                                    }
                                )
                            )
                        }

                        withContext(Dispatchers.IO) {
                            editMessage(
                                bot,
                                chatId,
                                messageId,
                                """
                                    ‚ú® –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...

                                    ${"üíñ".repeat(rating)}

                                    üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${(75 + position * 5)}%
                                """.trimIndent(),
                                parseMode = ParseMode.HTML,
                                inlineKeyboard = waveKeyboard
                            )
                        }
                        delay(200)
                    }
                }

                // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                val finalKeyboard = InlineKeyboardMarkup().apply {
                    keyboard = listOf(
                        listOf(
                            *Array(5) { index ->
                                InlineKeyboardButton(
                                    if (index < rating) "üíñ" else "‚ô°"
                                ).apply {
                                    callbackData = "stars_${index + 1}"
                                }
                            }
                        )
                    )
                }

                withContext(Dispatchers.IO) {
                    editMessage(
                        bot,
                        chatId,
                        messageId,
                        """
                            ‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! ‚ú®

                            ${"üíñ".repeat(rating)}

                            üåü –í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å!
                            üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: $rating –∏–∑ 5

                            ${getRandomCompliment(rating)}
                        """.trimIndent(),
                        parseMode = ParseMode.HTML,
                        inlineKeyboard = finalKeyboard
                    )
                }

            } catch (e: Exception) {
                println("Animation error: ${e.message}")
            }
        }
    }

    private fun getRandomCompliment(rating: Int): String {
        return when (rating) {
            5 -> listOf(
                "üéâ –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –í—ã —Å–¥–µ–ª–∞–ª–∏ –Ω–∞—à –¥–µ–Ω—å!",
                "üåü –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                "üí´ –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å—à—É—é –æ—Ü–µ–Ω–∫—É!"
            ).random()

            4 -> listOf(
                "üåü –û—Ç–ª–∏—á–Ω–æ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
                "‚ú® –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É!",
                "üí´ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ú—ã –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è —Å—Ç–∞—Ç—å –µ—â—ë –ª—É—á—à–µ!"
            ).random()

            3 -> listOf(
                "üëç –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
                "üí™ –ë—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!",
                "üåü –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É!"
            ).random()

            else -> listOf(
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç—ë–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ",
                "üí´ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
                "‚ú® –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–Ω–µ–º –ª—É—á—à–µ!"
            ).random()
        }
    }

}
