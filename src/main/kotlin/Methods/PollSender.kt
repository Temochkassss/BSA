package Methods

import Database.Question.CharForQuestionDb
import Database.Question.DatabaseQuestionHelper
import Database.Quizi.CharForQuiziDb
import Database.Quizi.DatabaseQuiziHelper
import Database.Results.CharForResultsDb
import Database.Results.DatabaseResultsHelper
import Methods.CallbackData.userStates
import Methods.TextSender.clearPreviousMessages
import Methods.TextSender.deleteMessage
import Methods.TextSender.sendMessage
import StringForBot
import org.telegram.telegrambots.bots.TelegramLongPollingBot
import org.telegram.telegrambots.meta.api.methods.ParseMode
import org.telegram.telegrambots.meta.api.methods.polls.SendPoll
import org.telegram.telegrambots.meta.api.objects.Message
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.polls.PollAnswer
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton

object PollSender {

    data class UserPollState(
        var currentQuestionIndex: Int = 0,
        var rightCurrentCompletion: Double = 0.0,
        var listForCompletionStatistic: MutableList<Int> = mutableListOf(),
        var listOfPollMID: MutableList<Int> = mutableListOf(),
        var mapResultIdFireMID: MutableMap <String, FireMessageInfo> = mutableMapOf()
    )
    val userPollStates = mutableMapOf<Long, UserPollState>()

    data class FireMessageInfo(
        val listOfPollMIDForFire: MutableList<Int> = mutableListOf(),
        val resultOfTakingPollMID: Int = 0,
        val resultOfTakingPollText: String = "",
    )

    private val dbQuestionHelper = DatabaseQuestionHelper(CharForQuestionDb.DATABASE_NAME)
    private val dbQuiziHelper = DatabaseQuiziHelper(CharForQuiziDb.DATABASE_NAME)
    private val dbResultsHelper = DatabaseResultsHelper(CharForResultsDb.DATABASE_NAME)

    private fun submitPoll(
        bot: TelegramLongPollingBot,
        chatId: Long,
        question: String,
        options: List<String>,
        isAnonymous: Boolean = false,
        allowsMultipleAnswers: Boolean = false,
        type: String = "regular", // —Ç–∏–ø –æ–ø—Ä–æ—Å–∞ - –ª–∞—Ç–∏–Ω–∏—Ü–æ–π —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
        correctAnswerId: Int? = null,
        explanation: String? = null, // –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ/–ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        openPeriod: Int? = null,
        protectContent: Boolean = false,
    ): Message? {
        val poll = SendPoll().apply {
            this.chatId = chatId.toString()
            this.type = type
            this.question = question
            this.options = options
            this.allowMultipleAnswers = allowsMultipleAnswers
            this.isAnonymous = isAnonymous
            this.explanation = explanation
            this.openPeriod = openPeriod
            this.protectContent = protectContent
            disableNotification = true // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–π–¥—ë—Ç –±–µ–∑–∑–≤—É—á–Ω–æ

            if (type == "quiz") {
                correctOptionId = correctAnswerId // –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            }

        }
        return bot.execute(poll)
    }

    fun handleFinishCreatingPoll(bot: TelegramLongPollingBot, update: Update, chatId: Long) {
        val userState = userStates.getOrPut(chatId) { CallbackData.UserState() }

        // –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à—ë–Ω
        userState.processCreatingPoll = false

        // –û–±–Ω—É–ª–µ–Ω–∏–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
        userState.questionNumberInCreating = 0

        if (userState.pollCreationState is CallbackData.PollCreationState.WaitingForCorrectAnswer){
            deleteMessage(bot, chatId, userState.chooseYourAnswerMID)
        }

        // –û—á–∏—â–∞–µ–º —á–∞—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–Ω–∞—á–∏–º–æ–≥–æ —Å–ª–æ–≤–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        deleteMessage(bot, chatId, update.message.messageId)

        val creatingPollIsStoped = sendMessage(
            bot,
            chatId,
            "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
        )?.messageId ?: 0
        MessageManager.addMessageToDelete(chatId,creatingPollIsStoped)

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        userState.isBackInCreatingPoll = true
        userState.isBackInCreatingPollForChoosingAnswers = true

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
        clearPreviousMessages(userState, bot, chatId, userState.keyboardAfterMainMenuMID, userState.mainMenuMID)

        if (userState.countCreatingPollIndividually > 0) {

            // –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
            Generation.nameOrSkipNamingTestGeneration(bot, chatId, userState)

            // –í–∞–∂–Ω–æ! –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            return
        } else {
            // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            TextSender.deleteMessagesSafely(bot, chatId)

            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
            userState.pollCreationState = null

            // –ë–ª–æ–∫ "–∞–Ω–∏–º–∞—Ü–∏–∏" –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            Animation.homeStickerAnimation(bot, userState, chatId)
        }

    }

    data class UserResultInfo(
        val userResultMID: Int,
        val userResultText: String,
        val userResultLink: String,
    )

    fun analysePollAnswer(
        bot: TelegramLongPollingBot,
        update: Update,
        pollAnswer: PollAnswer
    ) {
        val chatId = pollAnswer.user.id
        val optionIds = pollAnswer.optionIds // –º–∞—Å—Å–∏–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω–¥–µ–∫—Å–∞–º–∏

        val userState = userStates.getOrPut(chatId) { CallbackData.UserState() }
        val authorUserState = userStates.getOrPut(userState.authorChatId) { CallbackData.UserState() }
        val userPollState = userPollStates.getOrPut(chatId) { UserPollState() }

        // –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ testId
        val questionsFromDb = dbQuestionHelper.readQuestionFromQuestionDb(userState.testId)

                                       // –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤
        val testName = try {
            userState.testId?.let { dbQuestionHelper.readTestName(it) }
        } catch (e: Exception) {
            "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        }

        dbResultsHelper.insertResults(
            authorChatId = userState.authorChatId,
            userChatId = chatId,
            authorUsername = dbQuiziHelper.readUsernameByChatId(userState.authorChatId),
            userUsername = dbQuiziHelper.readUsernameByChatId(chatId),
            testName = testName,
            authorTestId = userState.testId ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            resultsTestId = userState.generatedResultId,
            choosedIndex = optionIds.firstOrNull() ?: -1,
            timestamp = userState.currentTimestamp,
            dbQuiziHelper = dbQuiziHelper
        )

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
        val currentQuestion = questionsFromDb[userPollState.currentQuestionIndex]
        if (optionIds.contains(currentQuestion.indexOfRightAnswer)) {
            // –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ, –∫–∞–∫ –≤–µ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
            userPollState.rightCurrentCompletion++
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            userPollState.currentQuestionIndex++
        } else {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            userPollState.currentQuestionIndex++
        }

        if (userPollState.currentQuestionIndex < questionsFromDb.size) {
            takePollWithParametr(bot, chatId)
        } else {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            val number: Double = userPollState.rightCurrentCompletion / userPollState.currentQuestionIndex
            val competitionPercentInAll = number * 100 // –≤ —Ü–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö 00.0
            val testNameFromDb = userState.testId?.let { dbQuestionHelper.readTestName(it) }.toString()

            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∂–µ–ª–∞–Ω–∏—é
            val keyboard = InlineKeyboardMarkup().apply {
                keyboard = listOf(
                    listOf(
                        InlineKeyboardButton("–°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã \uD83D\uDD25").apply { callbackData = "cleanAllAnswers_${userState.generatedResultId}" }
                    )
                )
            }
            userState.congratulationsMessage = if (testNameFromDb != "") {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "—Å—Ç–µ—Ä–µ—Ç—å –≤—Å—ë") –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –Ω–∞—á–∏–ª–∏—á–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
                """
                        –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ
                        –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ <b>${competitionPercentInAll.toInt()}%</b> —Ç–µ—Å—Ç–∞.
                        –¢–µ—Å—Ç: <b><i>"$testNameFromDb"</i></b>
                    """.trimIndent()
            } else {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "—Å—Ç–µ—Ä–µ—Ç—å –≤—Å—ë") –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
                """
                        –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ
                        –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ <b>${competitionPercentInAll.toInt()}%</b> —Ç–µ—Å—Ç–∞.
                    """.trimIndent()
            }
            userState.resultOfTakingPollMID = sendMessage(
                bot,
                chatId,
                userState.congratulationsMessage,
                inlineKeyboard = keyboard,
                parseMode = ParseMode.HTML
            )?. messageId ?: 0

            // –°–≤—è–∑—ã–≤–∞–µ–º resultId —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            userPollState.mapResultIdFireMID[userState.generatedResultId] = FireMessageInfo(
                listOfPollMIDForFire = userPollState.listOfPollMID.toMutableList(), // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
                resultOfTakingPollMID = userState.resultOfTakingPollMID, // –°–æ—Ö—Ä–∞–Ω—è–µ–º MID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                resultOfTakingPollText = userState.congratulationsMessage // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            )

            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ MID
            userPollState.listOfPollMID.clear()

            // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            userState.mapTestIdNumAttempts[userState.testId!!] = Generation.ResultAndSecurity(
                maxNumberOfAttempts = dbQuestionHelper.getAttemptsCount(userState.testId!!) ?: Int.MAX_VALUE,
                currentNumberOfAttempts = 1 + (userState.mapTestIdNumAttempts[userState.testId]?.currentNumberOfAttempts ?: 0)
            )

            // –û–±–Ω—É–ª–µ–Ω–∏–µ –ø—Ä–µ–º–µ–Ω–Ω—ã—Ö-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            userPollState.rightCurrentCompletion = 0.0
            userPollState.currentQuestionIndex = 0

            //–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            clearPreviousMessages(userState, bot, chatId, userState.supportStartTestTextMID)
            userState.pollCreationState = null

            // –ù–∞—á–∞–ª—å–Ω–∞—è Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            Generation.somethingElseKeyboardGeneration(bot, chatId, userState)

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–∑—è–∏–Ω—É —Ç–µ—Å—Ç–∞ —Å–æ–æ–±–∑–µ–Ω–∏–µ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            userState.testId?.let { dbQuestionHelper.updateCompletionPercent(newPercent = competitionPercentInAll, testId = it) }

            // –í—ã–¥–∞—á–∞ —Ñ–æ—Ç–æ—á–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
            val testId = userState.testId
            if (testId != null) {
                val pepperFileId = dbQuestionHelper.getPhotoFileId(testId)
                val targetComPercent = dbQuestionHelper.getTargetComPercent(testId)
                val targetUsername = dbQuestionHelper.getTargetUsername(testId)
                val authorUsername = dbQuiziHelper.readUsernameByChatId(userState.authorChatId)

                if (!pepperFileId.isNullOrEmpty() && targetComPercent != null
                    && competitionPercentInAll >= targetComPercent) {

                    val isTargetUser = targetUsername != null && targetUsername.isNotEmpty() &&
                            pollAnswer.user.userName == targetUsername

                    if (isTargetUser || targetUsername.isNullOrEmpty()) {
                        val message = if (isTargetUser) {
                            """
                                üéâ <b>–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –ª—É—á—à–µ –≤—Å–µ—Ö!</b>

                                –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç, —Ç—ã –ø–æ–∫–æ—Ä–∏–ª –µ–≥–æ! üí™
                                <b><a href='https://t.me/$authorUsername'>–ê–≤—Ç–æ—Ä</a></b> –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –∫–æ–µ-—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ... 
                                –ó–∞–≥–ª—è–Ω–∏ –ø–æ–¥ —Å–ø–æ–π–ª–µ—Ä, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ –∫ —Å—é—Ä–ø—Ä–∏–∑—É! üëÜ
                            """.trimIndent()
                        } else {
                            """
                                üéâ <b>–¢—ã –º–æ–ª–æ–¥–µ—Ü!</b>

                                –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –∏ –∑–∞—Å–ª—É–∂–∏–ª –Ω–∞–≥—Ä–∞–¥—É! üèÜ
                                <b><a href='https://t.me/$authorUsername'>–ê–≤—Ç–æ—Ä</a></b> –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –Ω–µ–±–æ–ª—å—à–æ–π —Å—é—Ä–ø—Ä–∏–∑... 
                                –û—Å–º–µ–ª–∏—à—å—Å—è –∑–∞–≥–ª—è–Ω—É—Ç—å –ø–æ–¥ —Å–ø–æ–π–ª–µ—Ä? üëÜ
                            """.trimIndent()
                        }.trimIndent()


                        MediaSender.sendPhoto(
                            bot,
                            chatId,
                            photoUrl = pepperFileId,
                            caption = message,
                            parseMode = ParseMode.HTML,
                            spoiler = true,
                            protectContent = true,
                        )
                    }
                }
            }

            if (userState.authorChatId != 0L) {
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
                fun escapeMarkdownV2(text: String): String {
                    return text.replace("""([_*\[\]()~`>#+=|{}.!-])""".toRegex()) {
                        "\\${it.value}"
                    }
                }

                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username
                val escapedUsername = pollAnswer.user.userName?.let { escapeMarkdownV2(it) } ?: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                val percentage = competitionPercentInAll.toInt()

                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
                val escapedTestName = if (testNameFromDb != "") {
                    escapeMarkdownV2(testNameFromDb)
                } else {
                    "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                }

                authorUserState.spoilerResultText = "||*@${escapedUsername}*|| –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç: *\"${escapedTestName}\"* –Ω–∞ _${percentage}%_\n"

                authorUserState.linkForReply = "https://t.me/${pollAnswer.user.userName}"

                authorUserState.seeUserResultMID = sendMessage(
                    bot,
                    userState.authorChatId,
                    authorUserState.spoilerResultText,
                    inlineKeyboard = StringForBot.seeSummaryResultIK(userState.generatedResultId, authorUserState.linkForReply),
                    parseMode = ParseMode.MARKDOWNV2
                )?.messageId ?: 0

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å resultId —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                authorUserState.mapResultIdUserResult[userState.generatedResultId] = UserResultInfo(
                    userResultMID = authorUserState.seeUserResultMID,
                    userResultText = authorUserState.spoilerResultText,
                    userResultLink = authorUserState.linkForReply
                )
            }
        }
    }

    fun takePollWithParametr (
        bot: TelegramLongPollingBot,
        chatId: Long,
    ) {
        val userState = userStates.getOrPut(chatId) { CallbackData.UserState() }
        val userPollState = userPollStates.getOrPut(chatId) { UserPollState() }

        val questionsFromDb = dbQuestionHelper.readQuestionFromQuestionDb(userState.testId) // –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ testId
        if (questionsFromDb.isNotEmpty()) {

            val currentQuestion = questionsFromDb[userPollState.currentQuestionIndex]

            val pollMID = submitPoll(
                bot = bot,
                chatId = chatId,
                question = currentQuestion.questionText,
                options = currentQuestion.listOfAnswers,
                type = "quiz",
                correctAnswerId = currentQuestion.indexOfRightAnswer,
                explanation = "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.listOfAnswers[currentQuestion.indexOfRightAnswer]}",
                openPeriod = 90
            )?.messageId ?: 0


            // –î–æ–±–∞–≤–ª—è–µ–º MID –æ–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            userPollState.listOfPollMID.add(pollMID)

        } else {
            sendMessage(bot, chatId, "–¢–µ—Å—Ç–∞ –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É.")
            Animation.homeStickerAnimation(bot, userState, chatId)
        }

    }

    fun sendQuestionsAnswerChoice(
        bot: TelegramLongPollingBot,
        chatId: Long,
    ) {
        val userState = userStates.getOrPut(chatId) { CallbackData.UserState() }

        // –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ testId
        val questionsFromDb = dbQuestionHelper.readQuestionFromQuestionDb(userState.testId)
        val currentQuestion = questionsFromDb[userState.currentQuestionIndex]

        val keyboard = InlineKeyboardMarkup().apply {
            keyboard = currentQuestion.listOfAnswers.mapIndexed { index, answer ->
                listOf( // –ø–µ—Ä–µ–¥–∞—á–∞ –≤–µ—Ä–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ optionRMP
                    InlineKeyboardButton(answer).apply { callbackData = "${index + 1}optionRMP${chatId}" }
                )
            }
        }
        userState.choiceTheCorrectAnswerMID = sendMessage(
            bot,
            chatId,
            currentQuestion.questionText,
            inlineKeyboard = keyboard
        )?.messageId ?: 0
    }
}